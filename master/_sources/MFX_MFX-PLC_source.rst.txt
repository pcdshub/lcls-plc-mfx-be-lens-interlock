

DUTs
----


Lens_Struct
^^^^^^^^^^^

::

    TYPE Lens_Struct :
    STRUCT
        IN :    BOOL;
        KNOWN : BOOL;
    END_STRUCT
    END_TYPE


GVLs
----


GVL
^^^

::

    VAR_GLOBAL
        /// User Memory Variables
        q_xLENSES_KNOWN: BOOL;   //All of the lenses are in a known state
        q_xMFX_LENSES_IN: BOOL;  //One of the MFX lenses are in
        q_xXRT_LENSES_IN: BOOL;  //One of the XRT lenses are in
        q_xHEARTBEAT_ALIVE: BOOL;//Whether heartbeat has updated
        q_xLAST_MESSAGE: WORD;   //Message to IOC
        q_xFAULTED: BOOL; //Whether Lens Interlock has tripped
        q_iLIMIT_MODE : INT;     //Limit mode being evaluated
        q_rCURRENT_LIMIT : REAL; //Limit value being used
        q_xLIMIT_VIOLATED : BOOL;  //Whether limit has been violated
        q_xPOSITION_LATCH    : BOOL; //Position Error Latch
        q_xLIMIT_LATCH       : BOOL;
        q_xMFX_LENS_MPSOK    : BOOL;


        i_xMFX_LENS01 : LENS_STRUCT; //First transfocator lens
        i_xMFX_LENS02 : LENS_STRUCT; //Second transfocator lens
        i_xMFX_LENS03 : LENS_STRUCT; //Third transfocator lens
        i_xMFX_LENS04 : LENS_STRUCT; //Fourth transfocator lens
        i_xMFX_LENS05 : LENS_STRUCT; //Fifth transfocator lens
        i_xMFX_LENS06 : LENS_STRUCT; //Sixth transfocator lens
        i_xMFX_LENS07 : LENS_STRUCT; //Seventh transfocator lens
        i_xMFX_LENS08 : LENS_STRUCT; //Eighth transfocator lens
        i_xMFX_LENS09 : LENS_STRUCT; //Ninth transfocator lens
        i_xMFX_LENS10 : LENS_STRUCT; //Tenth transfocator lens
        i_xXRT_LENS01 : LENS_STRUCT; //First prefocus lens
        i_xXRT_LENS02 : LENS_STRUCT; //Second prefocus lens
        i_xXRT_LENS03 : LENS_STRUCT; //Third prefocus lens

        i_rPREFOCUS_LIMIT: REAL; //Limit of the pre-focused MFX lenses
        i_rMFX_ONLY_LIMIT: REAL; //Limit of only the MFX lenses
        i_rXRT_ONLY_LIMIT: REAL; //Limit of only the XRT lenses

        i_rBEAM_FOCUS: REAL; //Current calculated focal point
        i_rXRT_FOCUS : REAL; //Current focal plane of the XRT
        i_xIOC_HEARTBEAT: BOOL; //Current status of heartbeat

        // Clear Fault Flags
        i_xFAULT_CLEAR: BOOL;

        LOTO_Override: BOOL := TRUE;
        /// test mb_Input_Coils[0] with "modpoll -r 32769 -t 1 127.0.0.1"
        mb_Input_Coils: ARRAY[0..255] OF BOOL;
        /// test mb_Output_Coils[0] with "modpoll -r 32769 -t 0 127.0.0.1"
        mb_Output_Coils: ARRAY[0..255] OF BOOL;
        /// test mb_Input_Registers[0] with "modpoll -r 32769 -t 3 127.0.0.1"
        mb_Input_Registers: ARRAY[0..255] OF WORD;
        /// test mb_Output_Registers[0] with "modpoll -r 32769 -t 4 127.0.0.1"
        mb_Output_Registers: ARRAY[0..255] OF WORD;
        /// test mb_PLC_Memory[0] with "modpoll -r 12289 -t 4 127.0.0.1"
        mb_PLC_Memory AT %MW0: ARRAY[0..1000] OF WORD;


    END_VAR


GVL_IO
^^^^^^

::

    VAR_GLOBAL
        /// AMS NetID
        g_aEcatMaster1 AT %I* : AMSNETID;

        (* Generic PLC Rail *)
        i_iR46_40el3064s01c01 AT %I*: INT;
        i_iR46_40el3064s01c02 AT %I*: INT;
        i_iR46_40el3064s01c03 AT %I*: INT;
        i_iR46_40el3064s01c04 AT %I*: INT;

        i_xR47_32kl2794s01c01 AT %Q*: BOOL;
        i_xR47_32kl2794s01c02 AT %Q*: BOOL;
        i_xR47_32kl2794s01c03 AT %Q*: BOOL;
        i_xR47_32kl2794s01c04 AT %Q*: BOOL;





    END_VAR


GVL_Variables_Devices
^^^^^^^^^^^^^^^^^^^^^

::

    VAR_GLOBAL
    //VGC
    vgcMXT_VGC_04 : ST_VGC;
    vgcDVD_VGC_01 : ST_VGC;
    vgcDIA_VGC_01 : ST_VGC;
    vgcDIA_VGC_02 : ST_VGC;
    vgcDG1_VGC_01 : ST_VGC;
    vgcDG1_VGC_02 : ST_VGC;
    //vgcDG2_VGC_01 : ST_VGC;
    //VG

    vgMFX_GPI_D1 : ST_VG; // dummy Pirani Gauge

    vgMXT_GCC_06 : ST_VG;
    vgDVD_GCC_02 : ST_VG;
    vgDVD_GCC_04 : ST_VG;
    vgMON_GCC_01 : ST_VG;
    vgDIA_GCC_01 : ST_VG;
    //vgDownstream : ST_VG;
    vgSB2_GCC_01 : ST_VG;
    vgDG1_GCC_01 : ST_VG;
    vgDG2_GCC_01 : ST_VG;


    END_VAR


POUs
----


Heartbeat
^^^^^^^^^

::

    FUNCTION_BLOCK Heartbeat
    VAR_INPUT
        BEAT      : BOOL; (*Heartbeat to monitor*)
        DEADTIME  : TIME; (*Acceptable deadtime*)

    END_VAR

    VAR_OUTPUT
        TIME_ON :TON;
        TIME_OFF :TOF;
        ALIVE : BOOL;     (*Whether Hearbeat is alive*)

    END_VAR
    TIME_ON(IN:=BEAT,PT:=DEADTIME);
    TIME_OFF(IN:=BEAT,PT:=DEADTIME);

    ALIVE := NOT TIME_ON.Q AND TIME_OFF.Q;

    END_FUNCTION_BLOCK


MAIN
^^^^

::

    PROGRAM MAIN
    VAR
        myBoolean : BOOL;
    END_VAR
    (* Modbus receive *)
    //p_ModbusRx_OutputReg();
    p_ModbusRx_OutputCoils();
    p_ModbusRx_PLCMemory();

    p_XLegacyPLCModbus();

    (* 	HARD-WIRED I/O UPDATE
        Update IO
    *)


    (* 	RESOLVE LOGIC
        Device Control & Monitoring
    *)


    //p_TurboSup();
    p_MPSSup();

    (* 	HARD-WIRED I/O UPDATE
        Update IO
    *)
    p_SoftIOMap();

    (* 	EPICS Tx UPDATE
        Modbus Map Receive
        IMPORTANT: This is the LAST subroutine to be called.
    *)

    p_ModbusTx_InputCoils();
    //p_ModbusTx_OutputCoils();
    //p_ModbusTx_InputReg();
    //p_ModbusTx_OutputReg();
    p_ModbusTx_PLCMemory();

    END_PROGRAM


p_ModbusRx_OutputCoils
^^^^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusRx_OutputCoils
    VAR

    END_VAR
    //mb_Output_Coils[0];  //System Controls
    g_stSystem.xOverrideMode:=mb_Output_Coils[1];  //System Controls
    //mb_Output_Coils[2];  //System Controls
    //mb_Output_Coils[3];  //System Controls
    //mb_Output_Coils[4];  //System Controls
    //mb_Output_Coils[5];  //System Controls
    //mb_Output_Coils[6];  //System Controls
    //mb_Output_Coils[7];  //System Controls
    //mb_Output_Coils[8];  //System Controls
    //mb_Output_Coils[9];  //System Controls
    //i_xMFX_LENS01.KNOWN:=mb_Output_Coils[10];  //Valve switch controls
    i_xMFX_LENS02.KNOWN:=mb_Output_Coils[11];  //Valve switch controls
    i_xMFX_LENS03.KNOWN:=mb_Output_Coils[12];  //Valve switch controls
    i_xMFX_LENS04.KNOWN:=mb_Output_Coils[13];  //Valve switch controls
    i_xMFX_LENS05.KNOWN:=mb_Output_Coils[14];  //Valve switch controls
    i_xMFX_LENS06.KNOWN:=mb_Output_Coils[15];  //Valve switch controls
    i_xMFX_LENS07.KNOWN:=mb_Output_Coils[16];  //Valve switch controls
    i_xMFX_LENS08.KNOWN:=mb_Output_Coils[17];  //Valve switch controls
    i_xMFX_LENS09.KNOWN:=mb_Output_Coils[18];  //Valve switch controls
    i_xMFX_LENS10.KNOWN:=mb_Output_Coils[19];  //Valve switch controls
    i_xXRT_LENS01.KNOWN:=mb_Output_Coils[20];
    i_xXRT_LENS02.KNOWN:=mb_Output_Coils[21];
    i_xXRT_LENS03.KNOWN:=mb_Output_Coils[22];
    //mb_Output_Coils[23];  //Valve switch controls
    //mb_Output_Coils[24];  //Valve switch controls
    //mb_Output_Coils[25];  //Valve switch controls
    //mb_Output_Coils[26];  //Valve switch controls
    //mb_Output_Coils[27];  //Valve switch controls
    //mb_Output_Coils[28];  //Valve switch controls
    //mb_Output_Coils[29];  //Valve switch controls
    i_xMFX_LENS01.IN:=mb_Output_Coils[30];  //Valve switch controls
    i_xMFX_LENS02.IN:=mb_Output_Coils[31];  //Valve switch controls
    i_xMFX_LENS03.IN:=mb_Output_Coils[32];  //Valve switch controls
    i_xMFX_LENS04.IN:=mb_Output_Coils[33];  //Valve switch controls
    i_xMFX_LENS05.IN:=mb_Output_Coils[34];  //Valve switch controls
    i_xMFX_LENS06.IN:=mb_Output_Coils[35];  //Valve switch controls
    i_xMFX_LENS07.IN:=mb_Output_Coils[36];  //Valve switch controls
    i_xMFX_LENS08.IN:=mb_Output_Coils[37];  //Valve switch controls
    i_xMFX_LENS09.IN:=mb_Output_Coils[38];  //Valve switch controls
    i_xMFX_LENS10.IN:=mb_Output_Coils[39];  //Valve switch controls
    i_xXRT_LENS01.IN:=mb_Output_Coils[40];
    i_xXRT_LENS02.IN:=mb_Output_Coils[41];
    i_xXRT_LENS03.IN:=mb_Output_Coils[42];
    //mb_Output_Coils[43];  //Valve switch controls
    //mb_Output_Coils[44];  //Valve switch controls
    //mb_Output_Coils[45];  //Valve switch controls
    //mb_Output_Coils[46];  //Valve switch controls
    //mb_Output_Coils[47];  //Valve switch controls
    //mb_Output_Coils[48];  //Valve switch controls
    //mb_Output_Coils[49];  //Valve switch controls
    i_xIOC_HEARTBEAT:=mb_Output_Coils[50];  //Valve switch controls
    i_xFAULT_CLEAR  :=mb_Output_Coils[51];  //Valve switch controls
    //mb_Output_Coils[52];  //Valve switch controls
    //mb_Output_Coils[53];  //Valve switch controls
    //mb_Output_Coils[54];  //Valve switch controls
    //mb_Output_Coils[55];  //Valve switch controls
    //mb_Output_Coils[56];  //Valve switch controls
    //mb_Output_Coils[57];  //Valve switch controls
    //mb_Output_Coils[58];  //Valve switch controls
    //mb_Output_Coils[59];  //Valve switch controls
    //mb_Output_Coils[60];  //Valve switch controls
    //mb_Output_Coils[61];  //Valve switch controls
    //mb_Output_Coils[62];  //Valve switch controls
    //mb_Output_Coils[63];  //Valve switch controls
    //mb_Output_Coils[64];  //Valve switch controls
    //mb_Output_Coils[65];  //Valve switch controls
    //mb_Output_Coils[66];  //Valve switch controls
    //mb_Output_Coils[67];  //Valve switch controls
    //mb_Output_Coils[68];  //Valve switch controls
    //mb_Output_Coils[69];  //Valve switch controls
    //mb_Output_Coils[70];  //Turbo Controls
    //mb_Output_Coils[71];  //Turbo Controls
    //mb_Output_Coils[72];  //Turbo Controls
    //mb_Output_Coils[74];  //Turbo Controls
    //mb_Output_Coils[75];  //Turbo Controls
    //mb_Output_Coils[76];  //Turbo Controls
    //mb_Output_Coils[77];  //Turbo Controls
    //mb_Output_Coils[78];  //Turbo Controls
    //mb_Output_Coils[79];  //Turbo Controls
    //mb_Output_Coils[80];  //Turbo Controls
    //mb_Output_Coils[81];  //Turbo Controls
    //mb_Output_Coils[82];  //Turbo Controls
    //mb_Output_Coils[83];  //Turbo Controls
    //mb_Output_Coils[84];  //Turbo Controls
    //mb_Output_Coils[85];  //Turbo Controls
    //mb_Output_Coils[86];  //Turbo Controls
    //mb_Output_Coils[87];  //Turbo Controls
    //mb_Output_Coils[88];  //Turbo Controls
    //mb_Output_Coils[89];  //Turbo Controls
    //mb_Output_Coils[90];  //Turbo Controls
    //mb_Output_Coils[91];  //Turbo Controls
    //mb_Output_Coils[92];  //Turbo Controls
    //mb_Output_Coils[93];  //Turbo Controls
    //mb_Output_Coils[94];  //Turbo Controls
    //mb_Output_Coils[95];  //Turbo Controls
    //mb_Output_Coils[96];  //Turbo Controls
    //mb_Output_Coils[97];  //Turbo Controls
    //mb_Output_Coils[98];  //Turbo Controls
    //mb_Output_Coils[99];  //Turbo Controls
    //mb_Output_Coils[100];  //Turbo Controls
    //mb_Output_Coils[101];  //Turbo Controls
    //mb_Output_Coils[102];  //Turbo Controls
    //mb_Output_Coils[103];  //Turbo Controls
    //mb_Output_Coils[104];  //Turbo Controls
    //mb_Output_Coils[105];  //Turbo Controls
    //mb_Output_Coils[106];  //Turbo Controls
    //mb_Output_Coils[107];  //Turbo Controls
    //mb_Output_Coils[108];  //Turbo Controls
    //mb_Output_Coils[109];  //Turbo Controls
    //mb_Output_Coils[110];  //Turbo Controls
    //mb_Output_Coils[111];  //Turbo Controls
    //mb_Output_Coils[112];  //Turbo Controls
    //mb_Output_Coils[113];  //Turbo Controls
    //mb_Output_Coils[114];  //Turbo Controls
    //mb_Output_Coils[115];  //Turbo Controls
    //mb_Output_Coils[116];  //Turbo Controls
    //mb_Output_Coils[117];  //Turbo Controls
    //mb_Output_Coils[118];  //Turbo Controls
    //mb_Output_Coils[119];  //Turbo Controls
    //vgMXT_GCC_06.xHV_SW:=mb_Output_Coils[120];  //CC HV Enable
    //vgDVD_GCC_02.xHV_SW:=mb_Output_Coils[121];  //CC HV Enable
    //vgDVD_GCC_04.xHV_SW:=mb_Output_Coils[122];  //CC HV Enable
    //vgMON_GCC_01.xHV_SW:=mb_Output_Coils[123];  //CC HV Enable
    //vgDIA_GCC_01.xHV_SW:=mb_Output_Coils[124];  //CC HV Enable
    //vgSB2_GCC_01.xHV_SW:=mb_Output_Coils[125];  //CC HV Enable
    //vgDG1_GCC_01.xHV_SW:=mb_Output_Coils[126];  //CC HV Enable
    //vgDG2_GCC_01.xHV_SW:=mb_Output_Coils[127];  //CC HV Enable
    //mb_Output_Coils[128];  //CC HV Enable
    //mb_Output_Coils[129];  //CC HV Enable
    //mb_Output_Coils[130];  //CC HV Enable
    //mb_Output_Coils[131];  //CC HV Enable
    //mb_Output_Coils[132];  //CC HV Enable
    //mb_Output_Coils[133];  //CC HV Enable
    //mb_Output_Coils[134];  //CC HV Enable
    //mb_Output_Coils[135];  //CC HV Enable
    //mb_Output_Coils[136];  //CC HV Enable
    //mb_Output_Coils[137];  //CC HV Enable
    //mb_Output_Coils[138];  //CC HV Enable
    //mb_Output_Coils[139];  //CC HV Enable
    //mb_Output_Coils[140];  //CC HV Enable
    //mb_Output_Coils[141];  //CC HV Enable
    //mb_Output_Coils[142];  //CC HV Enable
    //mb_Output_Coils[143];  //CC HV Enable
    //mb_Output_Coils[144];  //CC HV Enable
    //mb_Output_Coils[145];  //CC HV Enable
    //mb_Output_Coils[146];  //CC HV Enable
    //mb_Output_Coils[147];  //CC HV Enable
    //mb_Output_Coils[148];  //CC HV Enable
    //mb_Output_Coils[149];  //CC HV Enable
    //mb_Output_Coils[150];  //CC HV Enable
    //mb_Output_Coils[151];  //CC HV Enable
    //mb_Output_Coils[152];  //CC HV Enable
    //mb_Output_Coils[153];  //CC HV Enable
    //mb_Output_Coils[154];  //CC HV Enable
    //mb_Output_Coils[155];  //CC HV Enable
    //mb_Output_Coils[156];  //CC HV Enable
    //mb_Output_Coils[157];  //CC HV Enable
    //mb_Output_Coils[158];  //CC HV Enable
    //mb_Output_Coils[159];  //CC HV Enable
    //mb_Output_Coils[160];  //
    //mb_Output_Coils[161];  //
    //mb_Output_Coils[162];  //
    //mb_Output_Coils[163];  //
    //mb_Output_Coils[164];  //
    //mb_Output_Coils[165];  //
    //mb_Output_Coils[166];  //
    //mb_Output_Coils[167];  //
    //mb_Output_Coils[168];  //
    //mb_Output_Coils[169];  //
    //mb_Output_Coils[170];  //
    //mb_Output_Coils[171];  //
    //mb_Output_Coils[172];  //
    //mb_Output_Coils[173];  //
    //mb_Output_Coils[174];  //
    //mb_Output_Coils[175];  //
    //mb_Output_Coils[176];  //
    //mb_Output_Coils[177];  //
    //mb_Output_Coils[178];  //
    //mb_Output_Coils[179];  //
    //mb_Output_Coils[180];  //
    //mb_Output_Coils[181];  //
    //mb_Output_Coils[182];  //
    //mb_Output_Coils[183];  //
    //mb_Output_Coils[184];  //
    //mb_Output_Coils[185];  //
    //mb_Output_Coils[186];  //
    //mb_Output_Coils[187];  //
    //mb_Output_Coils[188];  //
    //mb_Output_Coils[189];  //
    //mb_Output_Coils[190];  //
    //mb_Output_Coils[191];  //
    //mb_Output_Coils[192];  //
    //mb_Output_Coils[193];  //
    //mb_Output_Coils[194];  //
    //mb_Output_Coils[195];  //
    //mb_Output_Coils[196];  //
    //mb_Output_Coils[197];  //
    //mb_Output_Coils[198];  //
    //mb_Output_Coils[199];  //
    //mb_Output_Coils[200];  //Valve overrides
    //mb_Output_Coils[201];  //Valve overrides
    //mb_Output_Coils[202];  //Valve overrides
    //mb_Output_Coils[203];  //Valve overrides
    //mb_Output_Coils[204];  //
    //mb_Output_Coils[205];  //
    //mb_Output_Coils[206];  //
    //mb_Output_Coils[207];  //
    //mb_Output_Coils[208];  //
    //mb_Output_Coils[209];  //
    //mb_Output_Coils[210];  //
    //mb_Output_Coils[211];  //
    //mb_Output_Coils[212];  //
    //mb_Output_Coils[213];  //
    //mb_Output_Coils[214];  //
    //mb_Output_Coils[215];  //
    //mb_Output_Coils[216];  //
    //mb_Output_Coils[217];  //
    //mb_Output_Coils[218];  //
    //mb_Output_Coils[219];  //
    //mb_Output_Coils[220];  //
    //mb_Output_Coils[221];  //
    //mb_Output_Coils[222];  //
    //mb_Output_Coils[223];  //
    //mb_Output_Coils[224];  //
    //mb_Output_Coils[225];  //
    //mb_Output_Coils[226];  //
    //mb_Output_Coils[227];  //
    //mb_Output_Coils[228];  //
    //mb_Output_Coils[229];  //
    //mb_Output_Coils[230];  //
    //mb_Output_Coils[231];  //
    //mb_Output_Coils[232];  //
    //mb_Output_Coils[233];  //
    //mb_Output_Coils[234];  //
    //mb_Output_Coils[235];  //
    //mb_Output_Coils[236];  //
    //mb_Output_Coils[237];  //
    //mb_Output_Coils[238];  //
    //mb_Output_Coils[239];  //
    //mb_Output_Coils[240];  //
    //mb_Output_Coils[241];  //
    //mb_Output_Coils[242];  //
    //mb_Output_Coils[243];  //
    //mb_Output_Coils[244];  //
    //mb_Output_Coils[245];  //
    //mb_Output_Coils[246];  //
    //mb_Output_Coils[247];  //
    //mb_Output_Coils[248];  //
    //mb_Output_Coils[249];  //
    //mb_Output_Coils[250];  //
    //mb_Output_Coils[251];  //
    //mb_Output_Coils[252];  //
    //mb_Output_Coils[253];  //
    //mb_Output_Coils[254];  //
    //mb_Output_Coils[255];  //

    END_PROGRAM


p_ModbusRx_PLCMemory
^^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusRx_PLCMemory
    VAR
    END_VAR
    MEMCPY(srcAddr:=ADR(mb_PLC_Memory[0]), destAddr:=ADR(i_rBEAM_FOCUS),     n:=SIZEOF(i_rBEAM_FOCUS));  //VG pressure sp readbacks
    MEMCPY(srcAddr:=ADR(mb_PLC_Memory[2]), destAddr:=ADR(i_rMFX_ONLY_LIMIT), n:=SIZEOF(i_rMFX_ONLY_LIMIT));  //VG pressure sp readbacks
    MEMCPY(srcAddr:=ADR(mb_PLC_Memory[4]), destAddr:=ADR(i_rXRT_ONLY_LIMIT), n:=SIZEOF(i_rXRT_ONLY_LIMIT));  //VG pressure sp readbacks
    MEMCPY(srcAddr:=ADR(mb_PLC_Memory[6]), destAddr:=ADR(i_rPREFOCUS_LIMIT), n:=SIZEOF(i_rPREFOCUS_LIMIT));  //VG pressure sp readbackss
    MEMCPY(srcAddr:=ADR(mb_PLC_Memory[8]), destAddr:=ADR(i_rXRT_FOCUS), n:=SIZEOF(i_rXRT_FOCUS));  //VG pressure sp readbackss

    END_PROGRAM


p_ModbusTx_InputCoils
^^^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusTx_InputCoils
    VAR

    END_VAR

    VAR_OUTPUT

        xHV_DIS: BOOL;
    END_VAR
    mb_Input_Coils[0]:=q_xHEARTBEAT_ALIVE;  //default
    mb_Input_Coils[1]:=q_xFAULTED;  //default
    mb_Input_Coils[2]:=q_xLENSES_KNOWN;  //default
    mb_Input_Coils[3]:=q_xLIMIT_VIOLATED;  //default
    mb_Input_Coils[4]:=q_xPOSITION_LATCH;  //default
    mb_Input_Coils[5]:=q_xLIMIT_LATCH;  //default
    mb_Input_Coils[6]:=FALSE;  //default
    mb_Input_Coils[7]:=FALSE;  //default
    mb_Input_Coils[8]:=FALSE;  //default
    mb_Input_Coils[9]:=FALSE;  //default
    mb_Input_Coils[10]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[11]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[12]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[13]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[14]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[15]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[16]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[17]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[18]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[19]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[20]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[21]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[22]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[23]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[24]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[25]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[26]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[27]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[28]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[29]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[30]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[31]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[32]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[33]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[34]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[35]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[36]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[37]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[38]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[39]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[40]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[41]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[42]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[43]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[44]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[45]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[46]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[47]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[48]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[49]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[50]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[51]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[52]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[53]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[54]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[55]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[56]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[57]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[58]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[59]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[60]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[61]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[62]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[63]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[64]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[65]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[66]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[67]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[68]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[69]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[70]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[71]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[72]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[73]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[74]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[75]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[76]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[77]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[78]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[79]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[80]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[81]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[82]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[83]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[84]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[85]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[86]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[87]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[88]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[89]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[90]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[91]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[92]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[93]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[94]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[95]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[96]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[97]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[98]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[99]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[100]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[101]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[102]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[103]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[104]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[105]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[106]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[107]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[108]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[109]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[110]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[111]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[112]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[113]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[114]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[115]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[116]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[117]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[118]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[119]:=FALSE;  //Valve position readbacks
    mb_Input_Coils[120]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[121]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[122]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[123]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[124]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[125]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[126]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[127]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[128]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[129]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[130]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[131]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[132]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[133]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[134]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[135]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[136]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[137]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[138]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[139]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[140]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[141]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[142]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[143]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[144]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[145]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[146]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[147]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[148]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[149]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[150]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[151]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[152]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[153]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[154]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[155]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[156]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[157]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[158]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[159]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[160]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[161]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[162]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[163]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[164]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[165]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[166]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[167]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[168]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[169]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[170]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[171]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[172]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[173]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[174]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[175]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[176]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[177]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[178]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[179]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[180]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[181]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[182]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[183]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[184]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[185]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[186]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[187]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[188]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[189]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[190]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[191]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[192]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[193]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[194]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[195]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[196]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[197]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[198]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[199]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[200]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[201]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[202]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[203]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[204]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[205]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[206]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[207]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[208]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[209]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[210]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[211]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[212]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[213]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[214]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[215]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[216]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[217]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[218]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[219]:=FALSE;  //Turbo pump readbacks
    mb_Input_Coils[220]:=FALSE;  //VG readbacks
    mb_Input_Coils[221]:=FALSE;  //VG readbacks
    mb_Input_Coils[222]:=FALSE;  //VG readbacks
    mb_Input_Coils[223]:=FALSE;  //VG readbacks
    mb_Input_Coils[224]:=FALSE;  //VG readbacks
    mb_Input_Coils[225]:=FALSE;  //VG readbacks
    mb_Input_Coils[226]:=FALSE;  //VG readbacks
    mb_Input_Coils[227]:=FALSE;  //VG readbacks
    mb_Input_Coils[228]:=FALSE;  //VG readbacks
    mb_Input_Coils[229]:=FALSE;  //VG readbacks
    mb_Input_Coils[230]:=FALSE;  //VG readbacks
    mb_Input_Coils[231]:=FALSE;  //VG readbacks
    mb_Input_Coils[232]:=FALSE;  //VG readbacks
    mb_Input_Coils[233]:=FALSE;  //VG readbacks
    mb_Input_Coils[234]:=FALSE;  //VG readbacks
    mb_Input_Coils[235]:=FALSE;  //VG readbacks
    mb_Input_Coils[236]:=FALSE;  //VG readbacks
    mb_Input_Coils[237]:=FALSE;  //VG readbacks
    mb_Input_Coils[238]:=FALSE;  //VG readbacks
    mb_Input_Coils[239]:=FALSE;  //VG readbacks
    mb_Input_Coils[240]:=FALSE;  //VG readbacks
    mb_Input_Coils[241]:=FALSE;  //VG readbacks
    mb_Input_Coils[242]:=FALSE;  //VG readbacks
    mb_Input_Coils[243]:=FALSE;  //VG readbacks
    mb_Input_Coils[244]:=FALSE;  //VG readbacks
    mb_Input_Coils[245]:=FALSE;  //VG readbacks
    mb_Input_Coils[246]:=FALSE;  //VG readbacks
    mb_Input_Coils[247]:=FALSE;  //VG readbacks
    mb_Input_Coils[248]:=FALSE;  //VG readbacks
    mb_Input_Coils[249]:=FALSE;  //VG readbacks
    mb_Input_Coils[250]:=FALSE;  //VG readbacks
    mb_Input_Coils[251]:=FALSE;  //VG readbacks
    mb_Input_Coils[252]:=FALSE;  //VG readbacks
    mb_Input_Coils[253]:=FALSE;  //VG readbacks
    mb_Input_Coils[254]:=FALSE;  //VG readbacks
    mb_Input_Coils[255]:=FALSE;  //VG readbacks

    END_PROGRAM


p_ModbusTx_InputReg
^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusTx_InputReg
    VAR

    END_VAR
    mb_Input_Registers[0]:=0;  //System info
    mb_Input_Registers[1]:=0;  //System info
    mb_Input_Registers[2]:=0;  //System info
    mb_Input_Registers[3]:=0;  //System info
    mb_Input_Registers[4]:=0;  //System info
    mb_Input_Registers[5]:=0;  //System info
    mb_Input_Registers[6]:=0;  //System info
    mb_Input_Registers[7]:=0;  //System info
    mb_Input_Registers[8]:=0;  //System info
    mb_Input_Registers[9]:=0;  //System info
    mb_Input_Registers[10]:=0;  //VG pressure readbacks
    mb_Input_Registers[11]:=0;  //VG pressure readbacks
    mb_Input_Registers[12]:=0;  //VG pressure readbacks
    mb_Input_Registers[13]:=0;  //VG pressure readbacks
    mb_Input_Registers[14]:=0;  //VG pressure readbacks
    mb_Input_Registers[15]:=0;  //VG pressure readbacks
    mb_Input_Registers[16]:=0;  //VG pressure readbacks
    mb_Input_Registers[17]:=0;  //VG pressure readbacks
    mb_Input_Registers[18]:=0;  //VG pressure readbacks
    mb_Input_Registers[19]:=0;  //VG pressure readbacks
    mb_Input_Registers[20]:=0;  //VG pressure readbacks
    mb_Input_Registers[21]:=0;  //VG pressure readbacks
    mb_Input_Registers[22]:=0;  //VG pressure readbacks
    mb_Input_Registers[23]:=0;  //VG pressure readbacks
    mb_Input_Registers[24]:=0;  //VG pressure readbacks
    mb_Input_Registers[25]:=0;  //VG pressure readbacks
    mb_Input_Registers[26]:=0;  //VG pressure readbacks
    mb_Input_Registers[27]:=0;  //VG pressure readbacks
    mb_Input_Registers[28]:=0;  //VG pressure readbacks
    mb_Input_Registers[29]:=0;  //VG pressure readbacks
    mb_Input_Registers[30]:=0;  //VG pressure readbacks
    mb_Input_Registers[31]:=0;  //VG pressure readbacks
    mb_Input_Registers[32]:=0;  //VG pressure readbacks
    mb_Input_Registers[33]:=0;  //VG pressure readbacks
    mb_Input_Registers[34]:=0;  //VG pressure readbacks
    mb_Input_Registers[35]:=0;  //VG pressure readbacks
    mb_Input_Registers[36]:=0;  //VG pressure readbacks
    mb_Input_Registers[37]:=0;  //VG pressure readbacks
    mb_Input_Registers[38]:=0;  //VG pressure readbacks
    mb_Input_Registers[39]:=0;  //VG pressure readbacks
    mb_Input_Registers[40]:=0;  //VG pressure readbacks
    mb_Input_Registers[41]:=0;  //VG pressure readbacks
    mb_Input_Registers[42]:=0;  //VG pressure readbacks
    mb_Input_Registers[43]:=0;  //VG pressure readbacks
    mb_Input_Registers[44]:=0;  //VG pressure readbacks
    mb_Input_Registers[45]:=0;  //VG pressure readbacks
    mb_Input_Registers[46]:=0;  //VG pressure readbacks
    mb_Input_Registers[47]:=0;  //VG pressure readbacks
    mb_Input_Registers[48]:=0;  //VG pressure readbacks
    mb_Input_Registers[49]:=0;  //VG pressure readbacks
    mb_Input_Registers[50]:=0;  //VG pressure readbacks
    mb_Input_Registers[51]:=0;  //VG pressure readbacks
    mb_Input_Registers[52]:=0;  //VG pressure readbacks
    mb_Input_Registers[53]:=0;  //VG pressure readbacks
    mb_Input_Registers[54]:=0;  //VG pressure readbacks
    mb_Input_Registers[55]:=0;  //VG pressure readbacks
    mb_Input_Registers[56]:=0;  //VG pressure readbacks
    mb_Input_Registers[57]:=0;  //VG pressure readbacks
    mb_Input_Registers[58]:=0;  //VG pressure readbacks
    mb_Input_Registers[59]:=0;  //VG pressure readbacks
    mb_Input_Registers[60]:=0;  //VG pressure readbacks
    mb_Input_Registers[61]:=0;  //VG pressure readbacks
    mb_Input_Registers[62]:=0;  //VG pressure readbacks
    mb_Input_Registers[63]:=0;  //VG pressure readbacks
    mb_Input_Registers[64]:=0;  //VG pressure readbacks
    mb_Input_Registers[65]:=0;  //VG pressure readbacks
    mb_Input_Registers[66]:=0;  //VG pressure readbacks
    mb_Input_Registers[67]:=0;  //VG pressure readbacks
    mb_Input_Registers[68]:=0;  //VG pressure readbacks
    mb_Input_Registers[69]:=0;  //VG pressure readbacks
    mb_Input_Registers[70]:=0;  //VG state readbacks
    mb_Input_Registers[71]:=0;  //VG state readbacks
    mb_Input_Registers[72]:=0;  //VG state readbacks
    mb_Input_Registers[73]:=0;  //VG state readbacks
    mb_Input_Registers[74]:=0;  //VG state readbacks
    mb_Input_Registers[75]:=0;  //VG state readbacks
    mb_Input_Registers[76]:=0;  //VG state readbacks
    mb_Input_Registers[77]:=0;  //VG state readbacks
    mb_Input_Registers[78]:=0;  //VG state readbacks
    mb_Input_Registers[79]:=0;  //VG state readbacks
    mb_Input_Registers[80]:=0;  //VG state readbacks
    mb_Input_Registers[81]:=0;  //VG state readbacks
    mb_Input_Registers[82]:=0;  //VG state readbacks
    mb_Input_Registers[83]:=0;  //VG state readbacks
    mb_Input_Registers[84]:=0;  //VG state readbacks
    mb_Input_Registers[85]:=0;  //VG state readbacks
    mb_Input_Registers[86]:=0;  //VG state readbacks
    mb_Input_Registers[87]:=0;  //VG state readbacks
    mb_Input_Registers[88]:=0;  //VG state readbacks
    mb_Input_Registers[89]:=0;  //VG state readbacks
    mb_Input_Registers[90]:=0;  //VG state readbacks
    mb_Input_Registers[91]:=0;  //VG state readbacks
    mb_Input_Registers[92]:=0;  //VG state readbacks
    mb_Input_Registers[93]:=0;  //VG state readbacks
    mb_Input_Registers[94]:=0;  //VG state readbacks
    mb_Input_Registers[95]:=0;  //VG state readbacks
    mb_Input_Registers[96]:=0;  //VG state readbacks
    mb_Input_Registers[97]:=0;  //VG state readbacks
    mb_Input_Registers[98]:=0;  //VG state readbacks
    mb_Input_Registers[99]:=0;  //VG state readbacks
    mb_Input_Registers[100]:=0;  //VG state readbacks
    mb_Input_Registers[101]:=0;  //VG state readbacks
    mb_Input_Registers[102]:=0;  //VG state readbacks
    mb_Input_Registers[103]:=0;  //VG state readbacks
    mb_Input_Registers[104]:=0;  //VG state readbacks
    mb_Input_Registers[105]:=0;  //VG state readbacks
    mb_Input_Registers[106]:=0;  //VG state readbacks
    mb_Input_Registers[107]:=0;  //VG state readbacks
    mb_Input_Registers[108]:=0;  //VG state readbacks
    mb_Input_Registers[109]:=0;  //VG state readbacks
    mb_Input_Registers[110]:=0;  //VG state readbacks
    mb_Input_Registers[111]:=0;  //VG state readbacks
    mb_Input_Registers[112]:=0;  //VG state readbacks
    mb_Input_Registers[113]:=0;  //VG state readbacks
    mb_Input_Registers[114]:=0;  //VG state readbacks
    mb_Input_Registers[115]:=0;  //VG state readbacks
    mb_Input_Registers[116]:=0;  //VG state readbacks
    mb_Input_Registers[117]:=0;  //VG state readbacks
    mb_Input_Registers[118]:=0;  //VG state readbacks
    mb_Input_Registers[119]:=0;  //VG state readbacks
    mb_Input_Registers[120]:=0;  //default
    mb_Input_Registers[121]:=0;  //default
    mb_Input_Registers[122]:=0;  //default
    mb_Input_Registers[123]:=0;  //default
    mb_Input_Registers[124]:=0;  //default
    mb_Input_Registers[125]:=0;  //default
    mb_Input_Registers[126]:=0;  //default
    mb_Input_Registers[127]:=0;  //default
    mb_Input_Registers[128]:=0;  //default
    mb_Input_Registers[129]:=0;  //default
    mb_Input_Registers[130]:=0;  //default
    mb_Input_Registers[131]:=0;  //default
    mb_Input_Registers[132]:=0;  //default
    mb_Input_Registers[133]:=0;  //default
    mb_Input_Registers[134]:=0;  //default
    mb_Input_Registers[135]:=0;  //default
    mb_Input_Registers[136]:=0;  //default
    mb_Input_Registers[137]:=0;  //default
    mb_Input_Registers[138]:=0;  //default
    mb_Input_Registers[139]:=0;  //default
    mb_Input_Registers[140]:=0;  //default
    mb_Input_Registers[141]:=0;  //default
    mb_Input_Registers[142]:=0;  //default
    mb_Input_Registers[143]:=0;  //default
    mb_Input_Registers[144]:=0;  //default
    mb_Input_Registers[145]:=0;  //default
    mb_Input_Registers[146]:=0;  //default
    mb_Input_Registers[147]:=0;  //default
    mb_Input_Registers[148]:=0;  //default
    mb_Input_Registers[149]:=0;  //default
    mb_Input_Registers[150]:=0;  //default
    mb_Input_Registers[151]:=0;  //default
    mb_Input_Registers[152]:=0;  //default
    mb_Input_Registers[153]:=0;  //default
    mb_Input_Registers[154]:=0;  //default
    mb_Input_Registers[155]:=0;  //default
    mb_Input_Registers[156]:=0;  //default
    mb_Input_Registers[157]:=0;  //default
    mb_Input_Registers[158]:=0;  //default
    mb_Input_Registers[159]:=0;  //default
    mb_Input_Registers[160]:=0;  //default
    mb_Input_Registers[161]:=0;  //default
    mb_Input_Registers[162]:=0;  //default
    mb_Input_Registers[163]:=0;  //default
    mb_Input_Registers[164]:=0;  //default
    mb_Input_Registers[165]:=0;  //default
    mb_Input_Registers[166]:=0;  //default
    mb_Input_Registers[167]:=0;  //default
    mb_Input_Registers[168]:=0;  //default
    mb_Input_Registers[169]:=0;  //default
    mb_Input_Registers[170]:=0;  //default
    mb_Input_Registers[171]:=0;  //default
    mb_Input_Registers[172]:=0;  //default
    mb_Input_Registers[173]:=0;  //default
    mb_Input_Registers[174]:=0;  //default
    mb_Input_Registers[175]:=0;  //default
    mb_Input_Registers[176]:=0;  //default
    mb_Input_Registers[177]:=0;  //default
    mb_Input_Registers[178]:=0;  //default
    mb_Input_Registers[179]:=0;  //default
    mb_Input_Registers[180]:=0;  //default
    mb_Input_Registers[181]:=0;  //default
    mb_Input_Registers[182]:=0;  //default
    mb_Input_Registers[183]:=0;  //default
    mb_Input_Registers[184]:=0;  //default
    mb_Input_Registers[185]:=0;  //default
    mb_Input_Registers[186]:=0;  //default
    mb_Input_Registers[187]:=0;  //default
    mb_Input_Registers[188]:=0;  //default
    mb_Input_Registers[189]:=0;  //default
    mb_Input_Registers[190]:=0;  //default
    mb_Input_Registers[191]:=0;  //default
    mb_Input_Registers[192]:=0;  //default
    mb_Input_Registers[193]:=0;  //default
    mb_Input_Registers[194]:=0;  //default
    mb_Input_Registers[195]:=0;  //default
    mb_Input_Registers[196]:=0;  //default
    mb_Input_Registers[197]:=0;  //default
    mb_Input_Registers[198]:=0;  //default
    mb_Input_Registers[199]:=0;  //default
    mb_Input_Registers[200]:=0;  //default
    mb_Input_Registers[201]:=0;  //default
    mb_Input_Registers[202]:=0;  //default
    mb_Input_Registers[203]:=0;  //default
    mb_Input_Registers[204]:=0;  //default
    mb_Input_Registers[205]:=0;  //default
    mb_Input_Registers[206]:=0;  //default
    mb_Input_Registers[207]:=0;  //default
    mb_Input_Registers[208]:=0;  //default
    mb_Input_Registers[209]:=0;  //default
    mb_Input_Registers[210]:=0;  //default
    mb_Input_Registers[211]:=0;  //default
    mb_Input_Registers[212]:=0;  //default
    mb_Input_Registers[213]:=0;  //default
    mb_Input_Registers[214]:=0;  //default
    mb_Input_Registers[215]:=0;  //default
    mb_Input_Registers[216]:=0;  //default
    mb_Input_Registers[217]:=0;  //default
    mb_Input_Registers[218]:=0;  //default
    mb_Input_Registers[219]:=0;  //default
    mb_Input_Registers[220]:=0;  //default
    mb_Input_Registers[221]:=0;  //default
    mb_Input_Registers[222]:=0;  //default
    mb_Input_Registers[223]:=0;  //default
    mb_Input_Registers[224]:=0;  //default
    mb_Input_Registers[225]:=0;  //default
    mb_Input_Registers[226]:=0;  //default
    mb_Input_Registers[227]:=0;  //default
    mb_Input_Registers[228]:=0;  //default
    mb_Input_Registers[229]:=0;  //default
    mb_Input_Registers[230]:=0;  //default
    mb_Input_Registers[231]:=0;  //default
    mb_Input_Registers[232]:=0;  //default
    mb_Input_Registers[233]:=0;  //default
    mb_Input_Registers[234]:=0;  //default
    mb_Input_Registers[235]:=0;  //default
    mb_Input_Registers[236]:=0;  //default
    mb_Input_Registers[237]:=0;  //default
    mb_Input_Registers[238]:=0;  //default
    mb_Input_Registers[239]:=0;  //default
    mb_Input_Registers[240]:=0;  //default
    mb_Input_Registers[241]:=0;  //default
    mb_Input_Registers[242]:=0;  //default
    mb_Input_Registers[243]:=0;  //default
    mb_Input_Registers[244]:=0;  //default
    mb_Input_Registers[245]:=0;  //default
    mb_Input_Registers[246]:=0;  //default
    mb_Input_Registers[247]:=0;  //default
    mb_Input_Registers[248]:=0;  //default
    mb_Input_Registers[249]:=0;  //default
    mb_Input_Registers[250]:=0;  //default
    mb_Input_Registers[251]:=0;  //default
    mb_Input_Registers[252]:=0;  //default
    mb_Input_Registers[253]:=0;  //default
    mb_Input_Registers[254]:=0;  //default
    mb_Input_Registers[255]:=0;  //default

    END_PROGRAM


p_ModbusTx_OutputCoils
^^^^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusTx_OutputCoils
    VAR
        vccSC3_VCC_02: INT;
    END_VAR
    mb_Output_Coils[0]:=FALSE;  //System Controls
    mb_Output_Coils[1]:=FALSE;  //System Controls
    mb_Output_Coils[2]:=FALSE;  //System Controls
    mb_Output_Coils[3]:=FALSE;  //System Controls
    mb_Output_Coils[4]:=FALSE;  //System Controls
    mb_Output_Coils[5]:=FALSE;  //System Controls
    mb_Output_Coils[6]:=FALSE;  //System Controls
    mb_Output_Coils[7]:=FALSE;  //System Controls
    mb_Output_Coils[8]:=FALSE;  //System Controls
    mb_Output_Coils[9]:=FALSE;  //System Controls
    mb_Output_Coils[10]:=FALSE;  //Valve switch controls
    mb_Output_Coils[11]:=FALSE;  //Valve switch controls
    mb_Output_Coils[12]:=FALSE;  //Valve switch controls
    mb_Output_Coils[13]:=FALSE;  //Valve switch controls
    mb_Output_Coils[14]:=FALSE;  //Valve switch controls
    mb_Output_Coils[15]:=FALSE;  //Valve switch controls
    mb_Output_Coils[16]:=FALSE;  //Valve switch controls
    mb_Output_Coils[17]:=FALSE;  //Valve switch controls
    mb_Output_Coils[18]:=FALSE;  //Valve switch controls
    mb_Output_Coils[19]:=FALSE;  //Valve switch controls
    mb_Output_Coils[20]:=FALSE;  //Valve switch controls
    mb_Output_Coils[21]:=FALSE;  //Valve switch controls
    mb_Output_Coils[22]:=FALSE;  //Valve switch controls
    mb_Output_Coils[23]:=FALSE;  //Valve switch controls
    mb_Output_Coils[24]:=FALSE;  //Valve switch controls
    mb_Output_Coils[25]:=FALSE;  //Valve switch controls
    mb_Output_Coils[26]:=FALSE;  //Valve switch controls
    mb_Output_Coils[27]:=FALSE;  //Valve switch controls
    mb_Output_Coils[28]:=FALSE;  //Valve switch controls
    mb_Output_Coils[29]:=FALSE;  //Valve switch controls
    mb_Output_Coils[30]:=FALSE;  //Valve switch controls
    mb_Output_Coils[31]:=FALSE;  //Valve switch controls
    mb_Output_Coils[32]:=FALSE;  //Valve switch controls
    mb_Output_Coils[33]:=FALSE;  //Valve switch controls
    mb_Output_Coils[34]:=FALSE;  //Valve switch controls
    mb_Output_Coils[35]:=FALSE;  //Valve switch controls
    mb_Output_Coils[36]:=FALSE;  //Valve switch controls
    mb_Output_Coils[37]:=FALSE;  //Valve switch controls
    mb_Output_Coils[38]:=FALSE;  //Valve switch controls
    mb_Output_Coils[39]:=FALSE;  //Valve switch controls
    mb_Output_Coils[40]:=FALSE;  //Valve switch controls
    mb_Output_Coils[41]:=FALSE;  //Valve switch controls
    mb_Output_Coils[42]:=FALSE;  //Valve switch controls
    mb_Output_Coils[43]:=FALSE;  //Valve switch controls
    mb_Output_Coils[44]:=FALSE;  //Valve switch controls
    mb_Output_Coils[45]:=FALSE;  //Valve switch controls
    mb_Output_Coils[46]:=FALSE;  //Valve switch controls
    mb_Output_Coils[47]:=FALSE;  //Valve switch controls
    mb_Output_Coils[48]:=FALSE;  //Valve switch controls
    mb_Output_Coils[49]:=FALSE;  //Valve switch controls
    mb_Output_Coils[50]:=FALSE;  //Valve switch controls
    mb_Output_Coils[51]:=FALSE;  //Valve switch controls
    mb_Output_Coils[52]:=FALSE;  //Valve switch controls
    mb_Output_Coils[53]:=FALSE;  //Valve switch controls
    mb_Output_Coils[54]:=FALSE;  //Valve switch controls
    mb_Output_Coils[55]:=FALSE;  //Valve switch controls
    mb_Output_Coils[56]:=FALSE;  //Valve switch controls
    mb_Output_Coils[57]:=FALSE;  //Valve switch controls
    mb_Output_Coils[58]:=FALSE;  //Valve switch controls
    mb_Output_Coils[59]:=FALSE;  //Valve switch controls
    mb_Output_Coils[60]:=FALSE;  //Valve switch controls
    mb_Output_Coils[61]:=FALSE;  //Valve switch controls
    mb_Output_Coils[62]:=FALSE;  //Valve switch controls
    mb_Output_Coils[63]:=FALSE;  //Valve switch controls
    mb_Output_Coils[64]:=FALSE;  //Valve switch controls
    mb_Output_Coils[65]:=FALSE;  //Valve switch controls
    mb_Output_Coils[66]:=FALSE;  //Valve switch controls
    mb_Output_Coils[67]:=FALSE;  //Valve switch controls
    mb_Output_Coils[68]:=FALSE;  //Valve switch controls
    mb_Output_Coils[69]:=FALSE;  //Valve switch controls
    mb_Output_Coils[70]:=FALSE;  //Turbo Controls
    mb_Output_Coils[71]:=FALSE;  //Turbo Controls
    mb_Output_Coils[72]:=FALSE;  //Turbo Controls
    mb_Output_Coils[74]:=FALSE;  //Turbo Controls
    mb_Output_Coils[75]:=FALSE;  //Turbo Controls
    mb_Output_Coils[76]:=FALSE;  //Turbo Controls
    mb_Output_Coils[77]:=FALSE;  //Turbo Controls
    mb_Output_Coils[78]:=FALSE;  //Turbo Controls
    mb_Output_Coils[79]:=FALSE;  //Turbo Controls
    mb_Output_Coils[80]:=FALSE;  //Turbo Controls
    mb_Output_Coils[81]:=FALSE;  //Turbo Controls
    mb_Output_Coils[82]:=FALSE;  //Turbo Controls
    mb_Output_Coils[83]:=FALSE;  //Turbo Controls
    mb_Output_Coils[84]:=FALSE;  //Turbo Controls
    mb_Output_Coils[85]:=FALSE;  //Turbo Controls
    mb_Output_Coils[86]:=FALSE;  //Turbo Controls
    mb_Output_Coils[87]:=FALSE;  //Turbo Controls
    mb_Output_Coils[88]:=FALSE;  //Turbo Controls
    mb_Output_Coils[89]:=FALSE;  //Turbo Controls
    mb_Output_Coils[90]:=FALSE;  //Turbo Controls
    mb_Output_Coils[91]:=FALSE;  //Turbo Controls
    mb_Output_Coils[92]:=FALSE;  //Turbo Controls
    mb_Output_Coils[93]:=FALSE;  //Turbo Controls
    mb_Output_Coils[94]:=FALSE;  //Turbo Controls
    mb_Output_Coils[95]:=FALSE;  //Turbo Controls
    mb_Output_Coils[96]:=FALSE;  //Turbo Controls
    mb_Output_Coils[97]:=FALSE;  //Turbo Controls
    mb_Output_Coils[98]:=FALSE;  //Turbo Controls
    mb_Output_Coils[99]:=FALSE;  //Turbo Controls
    mb_Output_Coils[100]:=FALSE;  //Turbo Controls
    mb_Output_Coils[101]:=FALSE;  //Turbo Controls
    mb_Output_Coils[102]:=FALSE;  //Turbo Controls
    mb_Output_Coils[103]:=FALSE;  //Turbo Controls
    mb_Output_Coils[104]:=FALSE;  //Turbo Controls
    mb_Output_Coils[105]:=FALSE;  //Turbo Controls
    mb_Output_Coils[106]:=FALSE;  //Turbo Controls
    mb_Output_Coils[107]:=FALSE;  //Turbo Controls
    mb_Output_Coils[108]:=FALSE;  //Turbo Controls
    mb_Output_Coils[109]:=FALSE;  //Turbo Controls
    mb_Output_Coils[110]:=FALSE;  //Turbo Controls
    mb_Output_Coils[111]:=FALSE;  //Turbo Controls
    mb_Output_Coils[112]:=FALSE;  //Turbo Controls
    mb_Output_Coils[113]:=FALSE;  //Turbo Controls
    mb_Output_Coils[114]:=FALSE;  //Turbo Controls
    mb_Output_Coils[115]:=FALSE;  //Turbo Controls
    mb_Output_Coils[116]:=FALSE;  //Turbo Controls
    mb_Output_Coils[117]:=FALSE;  //Turbo Controls
    mb_Output_Coils[118]:=FALSE;  //Turbo Controls
    mb_Output_Coils[119]:=FALSE;  //Turbo Controls
    //mb_Output_Coils[120]:=vgMXT_GCC_06.xHV_SW;  //CC HV Enable
    mb_Output_Coils[121]:=FALSE;  //CC HV Enable
    mb_Output_Coils[122]:=FALSE;  //CC HV Enable
    mb_Output_Coils[123]:=FALSE;  //CC HV Enable
    mb_Output_Coils[124]:=FALSE;  //CC HV Enable
    mb_Output_Coils[125]:=FALSE;  //CC HV Enable
    mb_Output_Coils[126]:=FALSE;  //CC HV Enable
    mb_Output_Coils[127]:=FALSE;  //CC HV Enable
    mb_Output_Coils[128]:=FALSE;  //CC HV Enable
    mb_Output_Coils[129]:=FALSE;  //CC HV Enable
    mb_Output_Coils[130]:=FALSE;  //CC HV Enable
    mb_Output_Coils[131]:=FALSE;  //CC HV Enable
    mb_Output_Coils[132]:=FALSE;  //CC HV Enable
    mb_Output_Coils[133]:=FALSE;  //CC HV Enable
    mb_Output_Coils[134]:=FALSE;  //CC HV Enable
    mb_Output_Coils[135]:=FALSE;  //CC HV Enable
    mb_Output_Coils[136]:=FALSE;  //CC HV Enable
    mb_Output_Coils[137]:=FALSE;  //CC HV Enable
    mb_Output_Coils[138]:=FALSE;  //CC HV Enable
    mb_Output_Coils[139]:=FALSE;  //CC HV Enable
    mb_Output_Coils[140]:=FALSE;  //CC HV Enable
    mb_Output_Coils[141]:=FALSE;  //CC HV Enable
    mb_Output_Coils[142]:=FALSE;  //CC HV Enable
    mb_Output_Coils[143]:=FALSE;  //CC HV Enable
    mb_Output_Coils[144]:=FALSE;  //CC HV Enable
    mb_Output_Coils[145]:=FALSE;  //CC HV Enable
    mb_Output_Coils[146]:=FALSE;  //CC HV Enable
    mb_Output_Coils[147]:=FALSE;  //CC HV Enable
    mb_Output_Coils[148]:=FALSE;  //CC HV Enable
    mb_Output_Coils[149]:=FALSE;  //CC HV Enable
    mb_Output_Coils[150]:=FALSE;  //CC HV Enable
    mb_Output_Coils[151]:=FALSE;  //CC HV Enable
    mb_Output_Coils[152]:=FALSE;  //CC HV Enable
    mb_Output_Coils[153]:=FALSE;  //CC HV Enable
    mb_Output_Coils[154]:=FALSE;  //CC HV Enable
    mb_Output_Coils[155]:=FALSE;  //CC HV Enable
    mb_Output_Coils[156]:=FALSE;  //CC HV Enable
    mb_Output_Coils[157]:=FALSE;  //CC HV Enable
    mb_Output_Coils[158]:=FALSE;  //CC HV Enable
    mb_Output_Coils[159]:=FALSE;  //CC HV Enable
    mb_Output_Coils[160]:=FALSE;  //
    mb_Output_Coils[161]:=FALSE;  //
    mb_Output_Coils[162]:=FALSE;  //
    mb_Output_Coils[163]:=FALSE;  //
    mb_Output_Coils[164]:=FALSE;  //
    mb_Output_Coils[165]:=FALSE;  //
    mb_Output_Coils[166]:=FALSE;  //
    mb_Output_Coils[167]:=FALSE;  //
    mb_Output_Coils[168]:=FALSE;  //
    mb_Output_Coils[169]:=FALSE;  //
    mb_Output_Coils[170]:=FALSE;  //
    mb_Output_Coils[171]:=FALSE;  //
    mb_Output_Coils[172]:=FALSE;  //
    mb_Output_Coils[173]:=FALSE;  //
    mb_Output_Coils[174]:=FALSE;  //
    mb_Output_Coils[175]:=FALSE;  //
    mb_Output_Coils[176]:=FALSE;  //
    mb_Output_Coils[177]:=FALSE;  //
    mb_Output_Coils[178]:=FALSE;  //
    mb_Output_Coils[179]:=FALSE;  //
    mb_Output_Coils[180]:=FALSE;  //
    mb_Output_Coils[181]:=FALSE;  //
    mb_Output_Coils[182]:=FALSE;  //
    mb_Output_Coils[183]:=FALSE;  //
    mb_Output_Coils[184]:=FALSE;  //
    mb_Output_Coils[185]:=FALSE;  //
    mb_Output_Coils[186]:=FALSE;  //
    mb_Output_Coils[187]:=FALSE;  //
    mb_Output_Coils[188]:=FALSE;  //
    mb_Output_Coils[189]:=FALSE;  //
    mb_Output_Coils[190]:=FALSE;  //
    mb_Output_Coils[191]:=FALSE;  //
    mb_Output_Coils[192]:=FALSE;  //
    mb_Output_Coils[193]:=FALSE;  //
    mb_Output_Coils[194]:=FALSE;  //
    mb_Output_Coils[195]:=FALSE;  //
    mb_Output_Coils[196]:=FALSE;  //
    mb_Output_Coils[197]:=FALSE;  //
    mb_Output_Coils[198]:=FALSE;  //
    mb_Output_Coils[199]:=FALSE;  //
    mb_Output_Coils[200]:=FALSE;  //Valve overrides
    mb_Output_Coils[201]:=FALSE;  //Valve overrides
    mb_Output_Coils[202]:=FALSE;  //Valve overrides
    mb_Output_Coils[203]:=FALSE;  //Valve overrides
    mb_Output_Coils[204]:=FALSE;  //
    mb_Output_Coils[205]:=FALSE;  //
    mb_Output_Coils[206]:=FALSE;  //
    mb_Output_Coils[207]:=FALSE;  //
    mb_Output_Coils[208]:=FALSE;  //
    mb_Output_Coils[209]:=FALSE;  //
    mb_Output_Coils[210]:=FALSE;  //
    mb_Output_Coils[211]:=FALSE;  //
    mb_Output_Coils[212]:=FALSE;  //
    mb_Output_Coils[213]:=FALSE;  //
    mb_Output_Coils[214]:=FALSE;  //
    mb_Output_Coils[215]:=FALSE;  //
    mb_Output_Coils[216]:=FALSE;  //
    mb_Output_Coils[217]:=FALSE;  //
    mb_Output_Coils[218]:=FALSE;  //
    mb_Output_Coils[219]:=FALSE;  //
    mb_Output_Coils[220]:=FALSE;  //
    mb_Output_Coils[221]:=FALSE;  //
    mb_Output_Coils[222]:=FALSE;  //
    mb_Output_Coils[223]:=FALSE;  //
    mb_Output_Coils[224]:=FALSE;  //
    mb_Output_Coils[225]:=FALSE;  //
    mb_Output_Coils[226]:=FALSE;  //
    mb_Output_Coils[227]:=FALSE;  //
    mb_Output_Coils[228]:=FALSE;  //
    mb_Output_Coils[229]:=FALSE;  //
    mb_Output_Coils[230]:=FALSE;  //
    mb_Output_Coils[231]:=FALSE;  //
    mb_Output_Coils[232]:=FALSE;  //
    mb_Output_Coils[233]:=FALSE;  //
    mb_Output_Coils[234]:=FALSE;  //
    mb_Output_Coils[235]:=FALSE;  //
    mb_Output_Coils[236]:=FALSE;  //
    mb_Output_Coils[237]:=FALSE;  //
    mb_Output_Coils[238]:=FALSE;  //
    mb_Output_Coils[239]:=FALSE;  //
    mb_Output_Coils[240]:=FALSE;  //
    mb_Output_Coils[241]:=FALSE;  //
    mb_Output_Coils[242]:=FALSE;  //
    mb_Output_Coils[243]:=FALSE;  //
    mb_Output_Coils[244]:=FALSE;  //
    mb_Output_Coils[245]:=FALSE;  //
    mb_Output_Coils[246]:=FALSE;  //
    mb_Output_Coils[247]:=FALSE;  //
    mb_Output_Coils[248]:=FALSE;  //
    mb_Output_Coils[249]:=FALSE;  //
    mb_Output_Coils[250]:=FALSE;  //
    mb_Output_Coils[251]:=FALSE;  //
    mb_Output_Coils[252]:=FALSE;  //
    mb_Output_Coils[253]:=FALSE;  //
    mb_Output_Coils[254]:=FALSE;  //
    mb_Output_Coils[255]:=FALSE;  //

    END_PROGRAM


p_ModbusTx_PLCMemory
^^^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_ModbusTx_PLCMemory
    VAR
    END_VAR
    MEMCPY(destAddr:=ADR(mb_PLC_Memory[100]), srcAddr:=ADR(q_rCURRENT_LIMIT), n:=SIZEOF(q_rCURRENT_LIMIT));  //VG pressure readbacks
    MEMCPY(destAddr:=ADR(mb_PLC_Memory[200]), srcAddr:=ADR(q_iLIMIT_MODE), n:=SIZEOF(q_iLIMIT_MODE));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[14]), srcAddr:=ADR(vgDVD_GCC_04.rPRESS), n:=SIZEOF(vgDVD_GCC_04.rPRESS));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[16]), srcAddr:=ADR(vgMON_GCC_01.rPRESS), n:=SIZEOF(vgMON_GCC_01.rPRESS));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[18]), srcAddr:=ADR(vgDIA_GCC_01.rPRESS), n:=SIZEOF(vgDIA_GCC_01.rPRESS));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[20]), srcAddr:=ADR(vgSB2_GCC_01.rPRESS), n:=SIZEOF(vgSB2_GCC_01.rPRESS));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[22]), srcAddr:=ADR(vgDG1_GCC_01.rPRESS), n:=SIZEOF(vgDG1_GCC_01.rPRESS));  //VG pressure readbacks
    //MEMCPY(destAddr:=ADR(mb_PLC_Memory[24]), srcAddr:=ADR(vgDG2_GCC_01.rPRESS), n:=SIZEOF(vgDG2_GCC_01.rPRESS));  //VG pressure readbacks

    END_PROGRAM


p_MPSSup
^^^^^^^^

::

    PROGRAM p_MPSSup
    VAR
        BEAT: Heartbeat;
        STATE_LATCH : RS;
        LIMIT_LATCH : RS;
        q_xXRT_VIOLATION : BOOL;
        q_xMFX_VIOLATION : BOOL;
    END_VAR
    //Instantiate Latches
    STATE_LATCH(SET:=NOT q_xLENSES_KNOWN,RESET1:=i_xFAULT_CLEAR);
    q_xPOSITION_LATCH := STATE_LATCH.Q1;

    LIMIT_LATCH(SET:=q_xLIMIT_VIOLATED,RESET1:=i_xFAULT_CLEAR);
    q_xLIMIT_LATCH := LIMIT_LATCH.Q1;

    //Instantiate Heartbeat and check to see if IOC is alive
    BEAT(BEAT:=i_xIOC_HEARTBEAT,DEADTIME:=TIME#1.0S);
    q_xHEARTBEAT_ALIVE := BEAT.ALIVE;

    IF NOT BEAT.ALIVE THEN
        q_xMFX_LENS_MPSOK := 0;
        q_xFAULTED := 1;
        RETURN;
    END_IF

    //Check no lens is unknown position
    q_xLENSES_KNOWN := (   i_xMFX_LENS02.KNOWN   //i_xMFX_LENS01.KNOWN AND i_xMFX_LENS02.KNOWN
                            AND i_xMFX_LENS03.KNOWN
                           AND i_xMFX_LENS04.KNOWN AND i_xMFX_LENS05.KNOWN
                           AND i_xMFX_LENS06.KNOWN AND i_xMFX_LENS07.KNOWN
                           AND i_xMFX_LENS08.KNOWN AND i_xMFX_LENS09.KNOWN
                           AND i_xMFX_LENS10.KNOWN AND i_xXRT_LENS01.KNOWN
                           AND i_xXRT_LENS02.KNOWN AND i_xXRT_LENS03.KNOWN);


    //Determine which lens group/s are being used
    q_xMFX_LENSES_IN :=  i_xMFX_LENS02.IN  //i_xMFX_LENS01.IN OR i_xMFX_LENS02.IN
                          OR i_xMFX_LENS03.IN OR i_xMFX_LENS04.IN
                         OR i_xMFX_LENS05.IN OR i_xMFX_LENS06.IN
                         OR i_xMFX_LENS07.IN OR i_xMFX_LENS08.IN
                         OR i_xMFX_LENS09.IN OR i_xMFX_LENS10.IN;

    q_xXRT_LENSES_IN :=  i_xXRT_LENS01.IN
                         OR i_xXRT_LENS02.IN
                         OR i_xXRT_LENS03.IN;




    //Check XRT lenses all by themselves
    IF q_xXRT_LENSES_IN THEN
        q_rCURRENT_LIMIT := i_rXRT_ONLY_LIMIT;
        q_iLIMIT_MODE := 1;
        IF i_rXRT_FOCUS = 0.0 OR i_rXRT_ONLY_LIMIT <= i_rXRT_FOCUS THEN
            q_xXRT_VIOLATION := 0;
        ELSE
            q_xXRT_VIOLATION := 1;
        END_IF
    ELSE
        q_xXRT_VIOLATION := 0;
    END_IF


    IF q_xXRT_LENSES_IN AND q_xMFX_LENSES_IN THEN
        q_iLIMIT_MODE := 3;
        q_rCURRENT_LIMIT := i_rPREFOCUS_LIMIT;
        IF  i_rPREFOCUS_LIMIT > i_rBEAM_FOCUS THEN
            q_xMFX_VIOLATION := 0;
        ELSE
            q_xMFX_VIOLATION := 1;
        END_IF
    END_IF

    //If only MFX lenses are in compare to MFX only limit
    IF NOT q_xXRT_LENSES_IN AND q_xMFX_LENSES_IN THEN
        q_iLIMIT_MODE := 2;
        q_rCURRENT_LIMIT := i_rMFX_ONLY_LIMIT;
        IF i_rMFX_ONLY_LIMIT > i_rBEAM_FOCUS THEN
            q_xMFX_VIOLATION := 0;
        ELSE
            q_xMFX_VIOLATION := 1;
        END_IF
    END_IF

    //If no lenses are in, no limit to be violated
    IF NOT q_xMFX_LENSES_IN AND NOT q_xXRT_LENSES_IN THEN
        q_iLIMIT_MODE :=0;
        q_rCURRENT_LIMIT := 0.0;
        q_xMFX_VIOLATION := 0;
        q_xXRT_VIOLATION := 0;
    END_IF

    //Summarize both lens groups
    q_xLIMIT_VIOLATED := q_xMFX_VIOLATION OR q_xXRT_VIOLATION;

    //Convert to final summary
    IF NOT q_xLIMIT_VIOLATED AND q_xLENSES_KNOWN THEN
        q_xMFX_LENS_MPSOK := 1;
        q_xFAULTED := 0;
    ELSE
        q_xMFX_LENS_MPSOK := 0;
        q_xFAULTED := 1;
    END_IF

    END_PROGRAM


p_SoftIOMap
^^^^^^^^^^^

::

    PROGRAM p_SoftIOMap
    VAR

    END_VAR
    (* Generic PLC Rail *)
    //	i_iR46_40el3064s01c01 AT %I*: INT;
    //	i_iR46_40el3064s01c02 AT %I*: INT;
    //	i_iR46_40el3064s01c03 AT %I*: INT;
    //	i_iR46_40el3064s01c04 AT %I*: INT;


    //	i_xR46_40el1008s02c04 AT %I*: BOOL;
    //	i_xR46_40el1008s02c05 AT %I*: BOOL;
    //	i_xR46_40el1008s02c06 AT %I*: BOOL;
    //	i_xR46_40el1008s02c07 AT %I*: BOOL;
    //	i_xR46_40el1008s02c08 AT %I*: BOOL;

        i_xR47_32kl2794s01c01:= q_xMFX_LENS_MPSOK; //AT %Q*: BOOL;
    //	q_xR46_40el2008s03c02 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c03 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c04 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c05 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c06 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c07 AT %Q*: BOOL;
    //	q_xR46_40el2008s03c08 AT %Q*: BOOL;

    END_PROGRAM


p_XLegacyPLCModbus
^^^^^^^^^^^^^^^^^^

::

    PROGRAM p_XLegacyPLCModbus
    VAR
        fbLegacyPLCInputCoilsRx	:	FB_MBReadCoils;

        i_xLegacyPLC_CnBits	:	ARRAY [0..20] OF BYTE;

        ftReset	: F_TRIG;

    END_VAR
    (* Modbus Info for Koyo
    Modbus Addresses for
    Koyo DL05/06/240/250/260/430/440/450 PLCs
    PLC Memory Type		| Modbus start address Decimal (octal) | Function codes
    Inputs (X)			  2048 (04000)							2
    Special Relays (SP)	  3072 (06000)							2
    Outputs (Y)			  2048 (04000)							1, 5, 15
    Control Relays (C)	  3072 (06000)							1, 5, 15
    Timer Contacts (T)	  6144 (014000)							1, 5, 15
    Counter Contacts (CT) 6400 (014400)							1, 5, 15
    Stage Status Bits (S) 6144 (012000)							1, 5, 15
    *)

    ftReset(CLK:=fbLegacyPLCInputCoilsRx.bBusy);

    fbLegacyPLCInputCoilsRx.bExecute := TRUE;

    fbLegacyPLCInputCoilsRx(sIPAddr:='172.21.62.99', nTCPPort:=502, nQuantity:=32, nMBAddr:=8#6000, cbLength:=SIZEOF(i_xLegacyPLC_CnBits),  pDestAddr:=ADR(i_xLegacyPLC_CnBits), tTimeout:=T#10S);

    IF fbLegacyPLCInputCoilsRx.bError THEN
        //run some error code for modbus
        //if there's a modbus error, set all incoming bits to zero, set
        // HXX PLC Relay coil C[10] is used for MXT:GCC:06.VacOK
        i_xLegacyPLC_CnBits[0].0 := 0;
        i_xLegacyPLC_CnBits[0].1 := 0;
        i_xLegacyPLC_CnBits[0].2 := 0;
        i_xLegacyPLC_CnBits[0].3 := 0;
        i_xLegacyPLC_CnBits[0].4 := 0;
        i_xLegacyPLC_CnBits[1].0 := 0;
        i_xLegacyPLC_CnBits[1].1 := 0;
        i_xLegacyPLC_CnBits[1].2 := 0;



    ELSIF ftReset.Q AND fbLegacyPLCInputCoilsRx.cbRead > 0 THEN
        fbLegacyPLCInputCoilsRx.bExecute := FALSE;

        //i_xUSVacOK := i_xLegacyPLC_CnBits[1].0;

    ELSE
        //more error code cause we didn't manage to read anything
    END_IF

    END_PROGRAM

